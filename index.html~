<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<title>eQTL Analysis in Apache SPARK</title>
<meta name="author" content="(Tammo Rukat)"/>

<link rel="stylesheet" href="./css/reveal.css"/>
<link rel="stylesheet" href="./css/theme/league.css" id="theme"/>
<link rel="stylesheet" href="./local.css"/>
<!-- If the query includes 'print-pdf', include the PDF print sheet -->
<script>
    if( window.location.search.match( /print-pdf/gi ) ) {
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = './css/print/pdf.css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
    }
</script>
<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
</head>
<body>
<div class="reveal">
<div class="slides">
<section id="sec-title-slide">
<h1>eQTL Analysis in Apache SPARK</h1>
<h2>Tammo Rukat</h2>
<h2><a href="mailto:tammorukat@gmail.com">tammorukat@gmail.com</a></h2>
<h2>May 27, 2005</h2>
</section>
<section id="table-of-contents">
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#/slide-sec-1">Apache Spark</a></li>
<li><a href="#/slide-sec-2">eQTL Analysis in Spark</a></li>
<li><a href="#/slide-sec-3">Future Work</a></li>
</ul>
</div>
</div>
</section>


<section>
<section id="slide-sec-1" data-background="figures/spark-logo5.png" data-background-size="600px" data-background-transition="fading">
<h2 id="sec-1">Apache Spark</h2>

<ul>
<li>Originated 2009 at UC Berkeley</li>
<li>Most active Apache project and most active open source big data project (by the number of contributors)</li>
<li>Allows repeated queries to data in cluster memory
<ul>
<li>For <b>iterative</b> algorithms.</li>
<li>For <b>interactive</b> queries.</li>
<li>Hadoop: .map() -&gt; .reduce() -&gt; write to disk</li>

</ul></li>
<li>Works on top of various cluster managers and data storage systems</li>
<li>Written in Scala, but APIs availabe in Python, Java, R.</li>

</ul>

<aside class="notes">
<ul class="org-ul">
<li>Still developed in very 'academic spirit'.
</li>
<li>Cluster manager: Standalone, Hadoop YARN, Apache Mesos
</li>
<li>Storage systems: HDFS, Amazon S3&#x2026;
</li>
</ul>

</aside>

</section>
<section id="slide-sec-1-1" data-background="figures/spark-logo5.png" data-background-size="700px" data-background-transition="fading">
<h3 id="sec-1-1">Resilient Distributed Dataset (RDD) - Sparks main abstraction</h3>

<ul>
<li data-fragment-index="1" class="fragment highlight-blue">A read only collection of Objects (e.g. lists, arrays, strings, variables, &#x2026;)</li>
<li data-fragment-index="2" class="fragment highlight-blue">Partitioned across machines</li>
<li data-fragment-index="3" class="fragment highlight-blue">Undergoing parallel operations</li>
<li data-fragment-index="4" class="fragment highlight-blue">Resides in Memory</li>
<li data-fragment-index="5" class="fragment highlight-blue">Evaluation is <b>lazy</b></li>
<li data-fragment-index="6" class="fragment highlight-blue">RDDs are ephemeral, but there lineage is tracked.</li>

</ul>

</section>
<section id="slide-sec-1-2" data-background="figures/spark-logo5.png" data-background-size="800px" data-background-transition="fading">
<h3 id="sec-1-2">Processing a text file with the Spark Python API</h3>

<pre  class="example">
##fileformat=VCFv4.1
##dummy example of a genotype file 				
#CHROM	POS     ID     REF	ALT	QUAL	HG1	HG2	HG3	HG4   ...	
22	160575	rs58769  A	G	PASS	1|0	0|0     0|0	0|0   ...
22	160576	rs58762	 G	A,C	PASS	0|0	2|2	0|0	0|0   ...
22	160577	rs58763	 C	TATA	PASS	1|1	0|0	0|0	0|1   ...
22	160578	rs58764	 C	T       PASS	0|0	0|0	0|0	0|0   ...
22	160579	rs58767	 C	A	PASS	0|0	0|0	0|0	0|0   ...
.       .       .        .      .       .       .       .       .       .     ...
.       .       .        .      .       .       .       .       .       .     ...
</pre>

<span class="fragment roll-in"><p>
Clean up comments and columns 
</p></span>
<div class="org-src-container">

<pre  class="fragment roll-in"><span style="color: #eedd82;">genotype</span> = spark.textFile(<span style="color: #ffa07a;">'input.txt'</span>)
<span style="color: #eedd82;">genotype</span> = genotype.<span style="color: #b0c4de;">filter</span>(<span style="color: #00ffff;">lambda</span> row: row[0] != <span style="color: #ffa07a;">'#'</span>).<span style="color: #b0c4de;">map</span>(<span style="color: #00ffff;">lambda</span> row: row.split(<span style="color: #ffa07a;">'\t'</span>))
</pre>
</div>

<span class="fragment roll-in"><p>
If we force computation, the output reads:
</p></span>

<div class="org-src-container">

<pre  class="fragment roll-in">[[22, 160575, <span style="color: #ffa07a;">'rs58769'</span>, <span style="color: #ffa07a;">'A'</span>, <span style="color: #ffa07a;">'G'</span>,    <span style="color: #ffa07a;">'PASS'</span>, <span style="color: #ffa07a;">'1|0'</span>, <span style="color: #ffa07a;">'0|0'</span>,<span style="color: #ffa07a;">'0|0'</span>,<span style="color: #ffa07a;">'0|0'</span>]
 [22, 160576, <span style="color: #ffa07a;">'rs58762'</span>, <span style="color: #ffa07a;">'G'</span>, <span style="color: #ffa07a;">'A,C'</span>,  <span style="color: #ffa07a;">'PASS'</span>, <span style="color: #ffa07a;">'0|0'</span>, <span style="color: #ffa07a;">'2|2'</span>,<span style="color: #ffa07a;">'0|0'</span>,<span style="color: #ffa07a;">'0|0'</span>]
 [22, 160577, <span style="color: #ffa07a;">'rs58763'</span>, <span style="color: #ffa07a;">'C'</span>, <span style="color: #ffa07a;">'TATA'</span>, <span style="color: #ffa07a;">'PASS'</span>, <span style="color: #ffa07a;">'1|1'</span>, <span style="color: #ffa07a;">'0|0'</span>,<span style="color: #ffa07a;">'0|0'</span>,<span style="color: #ffa07a;">'0|1'</span>]
 [22, 160578, <span style="color: #ffa07a;">'rs58764'</span>, <span style="color: #ffa07a;">'C'</span>, <span style="color: #ffa07a;">'T'</span>,    <span style="color: #ffa07a;">'PASS'</span>, <span style="color: #ffa07a;">'0|0'</span>, <span style="color: #ffa07a;">'0|0'</span>,<span style="color: #ffa07a;">'0|0'</span>,<span style="color: #ffa07a;">'0|0'</span>]
 [22, 160579, <span style="color: #ffa07a;">'rs58767'</span>, <span style="color: #ffa07a;">'C'</span>, <span style="color: #ffa07a;">'A'</span>,    <span style="color: #ffa07a;">'PASS'</span>, <span style="color: #ffa07a;">'0|0'</span>, <span style="color: #ffa07a;">'0|0'</span>,<span style="color: #ffa07a;">'0|0'</span>,<span style="color: #ffa07a;">'0|0'</span>]]
</pre>
</div>


</section>
<section>

<font color="red"><div align="left">Genotype data (size: 1e3 x 4e7)</div></font>
<div class="org-src-container">

<pre  class="src src-python">POS   ID       REFtoALT HG1     HG2     HG3     HG4     HG5     HG6  ... 
16077 rs587624 CtoTATA  2       0       0       1       0       1    ...    
16081 rs587628 GtoACG   1       0       1       0       1       0    ... 
16081 rs587628 GtoT     0       0       0       0       0       0    ...    
16085 rs587832 AtoG     0       0       0       0       0       1    ... 
16078 rs587625 CtoT     0       0       0       0       0       0    ...    
16082 rs587629 GtoT     0       0       0       0       0       0    ...    
16075 rs587622 AtoG     1       0       0       0       0       0    ...    
16079 rs587626 CtoA     0       0       0       0       0       0    ...    
16083 rs587630 GtoT     0       0       0       0       0       0    ...
</pre>
</div>


<font color="blue"><div align="left">Expression data (size: 1e3 x 2e5)</div></font>
<div class="org-src-container">

<pre  class="src src-python">CHROM START    END      ENTREZ_ID DESCRIPTION  HG1        HG2      HG3      HG4   ...
chr15 25302005 25302102 133415    SNORD116_3   -1.5092   -1.4306  0.5507   1.3763 ...
chr15 25319259 25319363 133422    SNORD116_7   0.4219    0.80277  -0.6127  -0.905 ...
chr15 25307478 25307575 123417    SNORD116_4   -0.0378   -0.28113 -1.0425  -1.020 ...
chr15 25321074 25321168 103423    SNORD116_8   0.7146    1.0656   0.7997   -1.114 ... 
chr15 25296622 25296719 103413    SNORD116_1   -1.374    1.0361   0.8036   1.2499 ...
chr15 25315577 25315674 103420    SNORD116_5   -0.0264   0.288    0.0005   1.3715 ...
chr15 25322196 25322290 103424    SNORD116_9   -1.702    -0.7864  1.0003   -0.489 ...
chr15 25299355 25299452 103414    SNORD116_2   0.143     -1.2503  1.8367   -0.772 ...
</pre>
</div>


</section>
<section id="slide-sec-1-3" data-background="figures/spark-logo5.png" data-background-size="900px" data-background-transition="fading">
<h3 id="sec-1-3">Spark data frames</h3>

<ul>
<li>Like data frames in R or python pandas library</li>
<li>Allow all common relational operations (select, filter, join, &#x2026;)</li>
<li>Supports SQL queries.</li>

</ul>

<span class="fragment roll-in"><p>
Find a particular SNP
</p></span>

<div class="org-src-container">

<pre  class="fragment roll-in">SNP_df.<span style="color: #b0c4de;">filter</span>(SNP_df.POS == 160576).show()
</pre>
</div>

<div class="org-src-container">

<pre  class="fragment roll-in">POS    ID      REFtoALT HG1 HG2 HG3 HG4 HG5 HG6 HG7 HG8 ...
160576 rs58769 GtoA     0   0   0   0   0   0   0   0   ...
160576 rs58769 GtoC     0   0   0   0   0   0   0   0   ...
</pre>
</div>


<span class="fragment roll-in"><p>
Find polymorphisms for a particular sample
</p></span>
<div class="org-src-container">

<pre  class="fragment roll-in">SNP_df.where(SNP_df[HG7] &gt;= 1).show()
</pre>
</div>

<div class="org-src-container">

<pre  class="fragment roll-in">POS    ID      REFtoALT HG1 HG2 HG3 HG4 HG5 HG6 HG7 HG8 ...
160577 rs58764 CtoTATA  2   0   0   1   0   1   1   0   ...     
160581 rs58768 GtoACG   1   0   1   0   1   0   2   0   ...
</pre>
</div>

</section>
</section>
<section>
<section id="slide-sec-2">
<h2 id="sec-2">eQTL Analysis in Spark</h2>
<div class="outline-text-2" id="text-2">
</div></section>
<section id="slide-sec-2-1">
<h3 id="sec-2-1">Example Query</h3>
<p>
Genotype and expression data have been loaded into data frames.
</p>
<div class="org-src-container">

<pre  class="src src-python"><span style="color: #eedd82;">SNP_df</span> = load_genotype_data(<span style="color: #ffa07a;">'genotype.vcf'</span>)
<span style="color: #eedd82;">epx_df</span> = load_expression_data(<span style="color: #ffa07a;">'expression.gct'</span>)
<span style="color: #eedd82;">gene_ids</span> = <span style="color: #ffa07a;">'all'</span>
<span style="color: #eedd82;">eQTLs</span> = cartesian_product_method(SNP_df, exp_df,\
                     gene_ids,\
                     max_distance=1e6,\
                     sign_level = .6,\
                     outname = <span style="color: #ffa07a;">'my_eQTL_analysis.out'</span>)

eQTLs.show()
</pre>
</div>

<span class="fragment roll-in"><p>
&#x2026; wait a minute &#x2026;
</p></span>

<div class="org-src-container">

<pre  class="fragment roll-in">CHROM ENTREZ_ID SNP_POSITION REFtoALT CORR  
chr15 1033415   16051        GtoACG   0.7368807  
chr15 1033415   16055        AtoG     0.6830418  
chr15 1033422   16055        AtoG     0.6285847  
chr15 1033422   16059        CtoA     0.6669201  
chr15 1033415   16075        AtoG     0.7927461  
chr15 1033415   16059        CtoA     0.6015037  
chr15 1033422   16050        CtoA     0.6285847  
chr15 1033415   16050        CtoA     0.8927461  
chr15 1033423   16055        AtoG     0.6175155  
chr15 1033423   16059        CtoA     0.7690654  
chr15 1033423   16050        CtoA     0.6175155
</pre>
</div>

</section>
<section id="slide-sec-2-2">
<h3 id="sec-2-2">Cis Analysis with Cartesian Product Method</h3>
<ol>  <li><b>Load and cache</b> the data into distributed Spark data frames</li>   <li><b>Select</b> the <font color="blue">quantitative traits (genes)</font> for analysis.</li>  <li> Broadcast an array with the <b>position</b> of the genes to every worker node</li> </ol>

<p>
<span class="underline">Iterate</span> for every gene:
</p>

<ol type="a"><li><b>Filter</b> <font color="red">SNPs</font> to be close enough (cis) to the current gene. </li> <li> <b>Broadcast</b> the <font color="blue">gene's expression</font> data to every worker node.</li> <li> <b>Calculate correlations</b> of the gene expression with every SNP.</li></ol>

<p>
<code>4.</code> Join results into data frame.
</p>

<aside class="notes">
<p>
What is the most time consuming step?
</p>

</aside>

</section>
<section id="slide-sec-2-2-1">
<h4 id="sec-2-2-1">Benchmark</h4>

<div class="figure">
<p><img src="./figures/benchmark_cpm_1_1.png" alt="benchmark_cpm_1_1.png" />
</p>
</div>

</section>
<section id="slide-sec-2-3">
<h3 id="sec-2-3">Sparse Vector Method</h3>
<p>
Just like before, but the SNP representation exploits the sparsity.
</p>

<p>
Prior representation:
</p>
<div class="org-src-container">

<pre  class="src src-python">POS    ID      REFtoALT HG1 HG2 HG3 HG4 HG5 HG6 HG7 HG8 ...
160577 rs58764 CtoTATA  0   0   0   1   0   0   0   0   ...     
160581 rs58768 GtoACG   0   0   2   0   1   0   0   0   ...
</pre>
</div>

<span class="fragment roll-in"><p>
Sparse representation of the same data:
</p></span>
<div class="org-src-container">

<pre  class="fragment roll-in">ID       HG1 HG2 HG3 HG4 HG5 HG6 HG7 HG8 ...
rs58764  SparseVector(1, {3:1})            
rs58768  SparseVector(2, {2:2, 4:1})
</pre>
</div>


</section>
<section id="slide-sec-2-3-1">
<h4 id="sec-2-3-1">Benchmark</h4>

<div class="figure">
<p><img src="./figures/benchmark_cpm_1_2.png" alt="benchmark_cpm_1_2.png" />
</p>
</div>

</section>
<section id="slide-sec-2-4">
<h3 id="sec-2-4">Ressource Dependency: Benchmark</h3>
<img src="figures/bm_half.png" frameborder="0" align="middle"> <br>
<ul>
<li>Scales nicely&#x2026;</li>

</ul>

</section>
<section id="slide-sec-2-5">
<h3 id="sec-2-5">Ressource Dependency: Benchmark (cont)</h3>
<img src="figures/bm_full.png" frameborder="0" align="middle"> <br>
<ul>
<li>&#x2026; up to 48 cores</li>

</ul>



</section>
<section id="slide-sec-2-6">
<h3 id="sec-2-6">Scaling with the number of genes</h3>
<img src="figures/gene_scaling_bm.png" frameborder="0" align="middle"> <br>
<ul>
<li>Linear behaviour</li>

</ul>

</section>
<section id="slide-sec-2-7">
<h3 id="sec-2-7">Scaling with the number of genes [cont]</h3>
<img src="figures/gene_scaling_bm_full.png" frameborder="0" align="middle"> <br>

</section>
</section>
<section>
<section id="slide-sec-3">
<h2 id="sec-3">Future Work</h2>
<ul>
<li class="fragment highlight-red">Improve the algorithm, especially the search of cis SNPs.</li>
<li class="fragment highlight-red">Implement Matrix method to avoid iterations.</li>
<li class="fragment highlight-red">Perform larger analyses (e.g. across chromosomes).</li>
<li class="fragment highlight-blue">Statistical tests
<ul>
<li>Simple significance test with multiple comparsion correction.</li>
<li>Resampling tests, Bootstrap.</li>

</ul></li>
<li class="fragment highlight-blue">Account for covarites (e.g. by principal componente analysis)</li>

</ul>

</section>
<section id="slide-sec-3-1">
<h3 id="sec-3-1">Acknowledgments</h3>
<p>
Thanks to
</p>
<ul>
<li><b>Satu Nahkuri</b> and <b>Barbara Endler-Jobst</b> at Roche</li>
<li>The whole Roche pREDi Data Science II team</li>
<li>Our supervisors in Oxford: <b>Chris Yau</b> and <b>Peter Humburg</b></li>
<li>Our funding: EPSRC</li>

</ul>
</section>
</section>
</div>
</div>

<script src="./lib/js/head.min.js"></script>
<script src="./js/reveal.js"></script>

<script>
// Full list of configuration options available here:
// https://github.com/hakimel/reveal.js#configuration
Reveal.initialize({

controls: true,
progress: true,
history: false,
center: true,
slideNumber: true,
rollingLinks: true,
keyboard: true,
overview: true,
width: 1200,
height: 800,
minScale: 0.50,
maxScale: 3.50,

theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
transition: Reveal.getQueryHash().transition || 'page', // default/cube/page/concave/zoom/linear/fade/none
transitionSpeed: 'default',
multiplex: {
    secret: '', // null if client
    id: '', // id, obtained from socket.io server
    url: '' // Location of socket.io server
},

// Optional libraries used to extend on reveal.js
dependencies: [
 { src: './plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
 { src: './plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
 { src: './plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
 { src: './plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }
]
});
</script>
</body>
</html>
